#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <stack>
using namespace std;
#define ll long long int
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
struct node {
    int data;
    struct node * left;
    struct node * right;
} * root = NULL;

struct node * insertNode(struct node * tNode, int value) {
    if(tNode == NULL) {
        struct node * newNode = (struct node *)malloc(sizeof(struct node));
        newNode->data = value;
        newNode->left = NULL;
        newNode->right = NULL;
        return newNode;
    }
    if(tNode->data > value)
        tNode->left = insertNode(tNode->left, value);
    else
        tNode->right = insertNode(tNode->right, value);
    return tNode;
}

void buildTree(int a[], int N) {
    for(int i = 0; i < N; i++) {
        if(i) {
            insertNode(root, a[i]);
        } else {
            root = insertNode(NULL, a[i]);
        }
    }
}

int heightOfTree(struct node* tNode){
 	if(tNode==NULL)
	       return 0;
 return (max(heightOfTree(tNode->left),heightOfTree(tNode->right)))+1;
}

void zigZagTraversal(struct node * tNode) {
    
    if(tNode==NULL)
        return ;
    
    stack<struct node*> s1;
    stack<struct node*> s2;
    
    s1.push(tNode);
    
    while(!s1.empty() || !s2.empty() ){
    
        	while(!s1.empty()){
                struct node *p = s1.top();
                s1.pop();
                cout<<p->data<<" ";
                if(p->right)
                    s2.push(p->right);
                if(p->left)	
                    s2.push(p->left);
            }
        	while(!s2.empty()){
                struct node *p = s2.top();
                s2.pop();
                cout<<p->data<<" ";
                if(p->left)	
                    s1.push(p->left);
                if(p->right)
                    s1.push(p->right);
            }
    }
}
int main() {
    int N;
    cin >> N;
    int arr[N];
    for(int i = 0; i < N; i++) {
        cin >> arr[i];
    }
    buildTree(arr, N);
    zigZagTraversal(root);
    cout << endl;
}