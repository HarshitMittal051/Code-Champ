#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
struct node {
	int data;
	struct node * left;
	struct node * right;
} * root = NULL;

struct node * insertNode(struct node * tNode, int value) {
	if(tNode == NULL) {
		struct node * newNode = (struct node *)malloc(sizeof(struct node));
		newNode->data = value;
		newNode->left = NULL;
		newNode->right = NULL;
		return newNode;
	}
	if(tNode->data > value)
		tNode->left = insertNode(tNode->left, value);
	else
		tNode->right = insertNode(tNode->right, value);
	return tNode;
}

void buildTree(int a[], int N) {
	for(int i = 0; i < N; i++) {
		if(i) {
			insertNode(root, a[i]);
		} else {
			root = insertNode(NULL, a[i]);
		}
	}
}

void levelOrderTraversal(struct node * tNode) {
    
    int l_level=0,level=0;
    
    pair<node *,int> p;
    
    queue<pair<struct node *,int> >q;
    
    q.push(make_pair(tNode,level)); 
    
   
    while(!q.empty())
    {
        p = q.front();      //Returns value of next element
        struct node *t = p.first;
        level = p.second;
        
        if(l_level!=level)
        {
            cout<<endl;
            l_level=level;
        }
        
        cout<<t->data<<" ";
        q.pop();
        
        if(t->left)
            q.push(make_pair(t->left,level+1));
        if(t->right)
            q.push(make_pair(t->right,level+1));
    }
    
}

int main() {
	int N;
	cin >> N;
	int arr[N];
	for(int i = 0; i < N; i++) {
		cin >> arr[i];
	}
	buildTree(arr, N);
	levelOrderTraversal(root);
}#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
struct node {
	int data;
	struct node * left;
	struct node * right;
} * root = NULL;

struct node * insertNode(struct node * tNode, int value) {
	if(tNode == NULL) {
		struct node * newNode = (struct node *)malloc(sizeof(struct node));
		newNode->data = value;
		newNode->left = NULL;
		newNode->right = NULL;
		return newNode;
	}
	if(tNode->data > value)
		tNode->left = insertNode(tNode->left, value);
	else
		tNode->right = insertNode(tNode->right, value);
	return tNode;
}

void buildTree(int a[], int N) {
	for(int i = 0; i < N; i++) {
		if(i) {
			insertNode(root, a[i]);
		} else {
			root = insertNode(NULL, a[i]);
		}
	}
}

void levelOrderTraversal(struct node * tNode) {
    
    int l_level=0,level=0;
    
    pair<node *,int> p;
    
    queue<pair<struct node *,int> >q;
    
    q.push(make_pair(tNode,level)); 
    
   
    while(!q.empty())
    {
        p = q.front();      //Returns value of next element
        struct node *t = p.first;
        level = p.second;
        
        if(l_level!=level)
        {
            cout<<endl;
            l_level=level;
        }
        
        cout<<t->data<<" ";
        q.pop();
        
        if(t->left)
            q.push(make_pair(t->left,level+1));
        if(t->right)
            q.push(make_pair(t->right,level+1));
    }
    
}

int main() {
	int N;
	cin >> N;
	int arr[N];
	for(int i = 0; i < N; i++) {
		cin >> arr[i];
	}
	buildTree(arr, N);
	levelOrderTraversal(root);
}