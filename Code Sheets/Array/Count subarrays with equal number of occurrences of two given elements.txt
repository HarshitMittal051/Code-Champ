/* C++ program to count number of sub-arrays in which 
  number of occurrence of x is equal to that of y using
  efficient approach in terms of time */
#include <bits/stdc++.h>
using namespace std;
 
int sameOccurrence(int arr[], int n, int x, int y)
{
    int countX[n], countY[n];
 
    map<int, int> m; // To store counts of same diffs
 
    // Count occurrences of x and y
    for (int i = 0; i < n; i++) {
        if (arr[i] == x) {
            if (i != 0)
                countX[i] = countX[i - 1] + 1;
            else
                countX[i] = 1;
        } else {
            if (i != 0)
                countX[i] = countX[i - 1];
            else
                countX[i] = 0;
        }
        if (arr[i] == y) {
            if (i != 0)
                countY[i] = countY[i - 1] + 1;
            else
                countY[i] = 1;
        } else {
            if (i != 0)
                countY[i] = countY[i - 1];
            else
                countY[i] = 0;
        }
   
         // Increment count of current
         m[countX[i] - countY[i]]++;
    }
 
    // Traverse map and commute result. 
    int result = m[0];
    for (auto it = m.begin(); it != m.end(); it++) 
        result = result + ((it->second) * ((it->second) - 1)) / 2;
     
    return (result);
}
 
// Driver code
int main()
{
    int arr[] = { 1, 2, 2, 3, 4, 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int x = 2, y = 3;
    cout << sameOccurrence(arr, n, x, y);
    return (0);
}

Reference -https://goo.gl/orMvbG